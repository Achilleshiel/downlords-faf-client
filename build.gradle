buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://maven.ej-technologies.com/repository' }
    maven { url 'http://repo.spring.io/plugins-release' }
  }

  dependencies {
    classpath("gradle.plugin.install4j.install4j:gradle_plugin:7.0.7")
    classpath("org.springframework.build.gradle:propdeps-plugin:${propdepsVersion}")
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:${coverallsGradlePluginVersion}")
  }
}

plugins {
  id "com.install4j.gradle" version "7.0.7"
  id "co.riiid.gradle" version "0.4.2"
  id "de.undercouch.download" version "3.4.3"
  id 'net.ltgt.apt' version '0.19'
}

subprojects {
  repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.ej-technologies.com/repository' }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    maven { url "http://maven.teamdev.com/repository/products" }
    maven { url  "https://dl.bintray.com/supcomhub/maven-public" }
  }

  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'propdeps'

  idea.module.outputDir file("out/production/classes")

  group = 'org.supcomhub.client'
  // Version has to be passed at build time from command line
  version = "${version}"

  sourceCompatibility = 1.11
  targetCompatibility = 1.11

  configurations {
    compile.exclude module: "assertj-core"
  }

  jar {
    manifest {
      attributes "Main-Class": "com.faforever.client.FafClientApplication",
          "Implementation-Title": "Downlord's FAF Client",
          "Implementation-Version": version,
          "Implementation-Vendor": "Downlord"
    }
  }

  dependencies {
    compileOnly("org.jetbrains:annotations:16.0.3")
    testCompileOnly("org.jetbrains:annotations:16.0.3")

    // Mind that Lombok doesn't work with modularized code yet. See https://github.com/rzwitserloot/lombok/issues/1723
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    implementation("com.github.micheljung:nocatch:${noCatchVersion}")
  }
}

configure([project(':commons'), project(':service'), project(':ui')]) {
  apply plugin: 'jacoco'

  configurations {
    codacy
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
    }
  }

  jacoco {
    toolVersion = "${jacocoVersion}"
  }
  
  task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
        "report",
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/test/jacocoTestReport.xml",
        "debug",
        "false"
    ]
  }
  
  dependencies {
    codacy("com.github.codacy:codacy-coverage-reporter:-SNAPSHOT")
  }
}
